一 ActiveX控件（COM组件技术的应用之一）
   1 概念
   1.1 ActIvex控件的概念
   基于COM组件技术，可以被任何支持COM标准的计算机
   程序的项目使用。可以采用拖拉的方式创建，使用像
   一般控件一样方便。文件后缀是ocx，有时候称为ocx
   控件。
   1.2 COM组件的概念
       Component Object Model，组件对象模型。
       可以改善项目的架构，使得项目可维护性和可复
       用性更好。COM组件是一些小的可以执行的二进制文件，
       以接口的方式为其它的程序、系统和组件提供服务。
   1.3 COM接口的概念
       C语言-接口就是函数
       C++语言-接口就是公有的成员函数
       COM接口-一组纯虚函数的结合。
       纯虚函数只有功能的描述，没有具体的实现过程。
       特点是稳定，不易变化。引入接口的目的是解耦。
       排序模块（小的dll程序）
       接口函数：public void Sort(int a[])=0;
       实现排序的组件：派生自接口的实现类。
       冒泡实现->修改为快速实现。
       exe程序
       另外一个模块调用排序模块实现了排序功能。

   2 开发、注册、测试
   2.1 使用MFC向导开发ActiveX控件 WTL也可
       2.1.1生成的类和接口的介绍
       第一个接口-添加方法和属性
       第二个接口-添加事件
       App-应用程序类
       Ctrl类-控件类，完成控件外观的绘制，以及控件
       功能的具体实现。
       PropPage类-属性页类，添加控件的属性设置
       2.1.2在Ctrl::OnDraw()函数中完成控件的外观
       2.1.3通过第一个接口添加方法和属性
       添加方法： SetNumbers
       添加属性： Direction
       2.1.4通过第二个接口添加事件
       事件分库存事件和用户自定义事件两种
       库存事件：Click等
       用户自定义事件：MyMsg
       库存事件自动通知的，换句话说，只需要添加事件即可。
       而用户自定义事件在添加事件后，需要在相应的位置添加
       FireMyMsg()的调用手动通知。

   2.2 测试
       在开发过程中以及开发完成后都可以使用
       ActiveX Control Test Container工具测试控件
   2.3 注册
       在使用vc6.0开发ActiveX控件的时候，当编译程序时，
       自动完成控件注册。
       微软提供了一个注册工具regsvr32.exe完成控件注册。
       在运行框中输入：
       regsvr32 "组件所在的文件路径" 注册控件（将控件的信息写入注册表中）
       regsvr32 /u "组件所在的文件路径" 卸载控件
   3* 使用
   3.1 在窗口程序中使用
       右击对话框的空白处，选择Insert ActiveX Control
       菜单，弹出插入控件对话框，选择控件即可。
       打开类向导对话框，为控件绑定成员变量，提示添加控件的封装类，按照提示
       添加即可。
       可以像使用一般控件一样使用ActiveX控件
   3.2 在Html页面中使用
       1 ocx控件对应的是<object>标签。
       2 在标签中设置ocx控件的clsid
       3 在开发控件的工程中，双任何一个接口打开odl文件，在文件中找coclass关键字，
         在该关键字上面的描述块[]中，uuid就是控件ID，即clsid。
二 COM的数据类型
   1 BSTR-字符串类型
     1.1 基本函数
	 1.1.1 使用前创建
	       SysAllocString
 	 1.1.2 使用后释放
	       SysFreeString
	 头文件:#include <altbase.h>
         基本函数的使用比较繁琐，为了简化对BSTR
	 类型的操作，提出了封装类。
     1.2 BSTR的封装类
	 微软在ATL库提供的封装类
 	 CComBSTR类
	 标准的C++库提供了封装类
	 _bstr_t类

	 在封装类的构造函数中包含了创建函数，在析构函数中包含了释放函数。另外，提供了
	 一些操作字符串的函数。
   2 VARIANT-可变类型
     本质上是一个结构体，包括类型和值两部分。
     VARTYPE vt;	//表示类型
     使用union		//表示各种不同类型的值
     VARIANT的封装类
     ATL库的封装类 CComVariant
     C++库封装类 _variant_t